// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     record.avro
 */
package dtsavro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
)

type Source int32

const (
	SourceMYSQL Source = 0
)

func (e Source) String() string {
	switch e {
	case SourceMYSQL:
		return "MYSQL"
	}
	return "unknown"
}

func writeSource(r Source, w io.Writer) error {
	return vm.WriteInt(int32(r), w)
}

func NewSourceValue(raw string) (r Source, err error) {
	switch raw {
	case "MYSQL":
		return SourceMYSQL, nil
	}

	return -1, fmt.Errorf("invalid value for Source: '%s'", raw)
}

func (b *Source) MarshalJSON() ([]byte, error) {
	return json.Marshal([]byte(b.String()))
}

func (b *Source) UnmarshalJSON(data []byte) error {
	var stringVal string
	err := json.Unmarshal(data, &stringVal)
	if err != nil {
		return err
	}
	val, err := NewSourceValue(stringVal)
	*b = val
	return err
}

type SourceWrapper struct {
	Target *Source
}

func (b *SourceWrapper) SetBoolean(v bool) {
	panic("Unable to assign boolean to int field")
}

func (b *SourceWrapper) SetInt(v int32) {
	*(b.Target) = Source(v)
}

func (b *SourceWrapper) SetLong(v int64) {
	panic("Unable to assign long to int field")
}

func (b *SourceWrapper) SetFloat(v float32) {
	panic("Unable to assign float to int field")
}

func (b *SourceWrapper) SetUnionElem(v int64) {
	panic("Unable to assign union elem to int field")
}

func (b *SourceWrapper) SetDouble(v float64) {
	panic("Unable to assign double to int field")
}

func (b *SourceWrapper) SetBytes(v []byte) {
	panic("Unable to assign bytes to int field")
}

func (b *SourceWrapper) SetString(v string) {
	panic("Unable to assign string to int field")
}

func (b *SourceWrapper) Get(i int) types.Field {
	panic("Unable to get field from int field")
}

func (b *SourceWrapper) SetDefault(i int) {
	panic("Unable to set default on int field")
}

func (b *SourceWrapper) AppendMap(key string) types.Field {
	panic("Unable to append map key to from int field")
}

func (b *SourceWrapper) AppendArray() types.Field {
	panic("Unable to append array element to from int field")
}

func (b *SourceWrapper) NullField(int) {
	panic("Unable to null field in int field")
}

func (b *SourceWrapper) Finalize() {}
