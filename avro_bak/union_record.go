// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     old_record.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
)

type UnionRecordTypeEnum int

const (
	UnionRecordTypeEnumRecord UnionRecordTypeEnum = 0
)

type UnionRecord struct {
	Record    *Record
	UnionType UnionRecordTypeEnum
}

func writeUnionRecord(r *UnionRecord, w io.Writer) error {

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionRecordTypeEnumRecord:
		return writeRecord(r.Record, w)
	}
	return fmt.Errorf("invalid value for *UnionRecord")
}

func NewUnionRecord() *UnionRecord {
	return &UnionRecord{}
}

func (_ *UnionRecord) SetBoolean(v bool)   { panic("Unsupported operation") }
func (_ *UnionRecord) SetInt(v int32)      { panic("Unsupported operation") }
func (_ *UnionRecord) SetFloat(v float32)  { panic("Unsupported operation") }
func (_ *UnionRecord) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionRecord) SetBytes(v []byte)   { panic("Unsupported operation") }
func (_ *UnionRecord) SetString(v string)  { panic("Unsupported operation") }
func (r *UnionRecord) SetLong(v int64) {
	r.UnionType = (UnionRecordTypeEnum)(v)
}
func (r *UnionRecord) Get(i int) types.Field {
	switch i {
	case 0:
		r.Record = NewRecord()
		return r.Record
	}
	panic("Unknown field index")
}
func (_ *UnionRecord) NullField(i int)                  { panic("Unsupported operation") }
func (_ *UnionRecord) SetDefault(i int)                 { panic("Unsupported operation") }
func (_ *UnionRecord) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionRecord) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *UnionRecord) Finalize()                        {}

func (r *UnionRecord) MarshalJSON() ([]byte, error) {
	if r == nil {
		return []byte("null"), nil
	}
	switch r.UnionType {
	case UnionRecordTypeEnumRecord:
		return json.Marshal(map[string]interface{}{"Record": r.Record})
	}
	return nil, fmt.Errorf("invalid value for *UnionRecord")
}

func (r *UnionRecord) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if value, ok := fields["Record"]; ok {
		r.UnionType = 0
		return json.Unmarshal([]byte(value), &r.Record)
	}
	return fmt.Errorf("invalid value for *UnionRecord")
}
